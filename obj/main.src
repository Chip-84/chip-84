; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME1"
.TYPE 104
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME7"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME8",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME9"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME10"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME10",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME10"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME11",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME11"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME15"
	SEGMENT BSS
_curFile:
	DS	1
.DEFINE "curFile"
.ALIAS "_curFile"
.CLASS 83
.VALUE _curFile
.TYPE 12
.ENDEF
_files:
	DS	2295
.DEFINE "files"
.ALIAS "_files"
.CLASS 83
.VALUE _files
.DIM 255
.DIM 9
.TYPE 866
.ENDEF
_count:
	DS	1
.DEFINE "count"
.ALIAS "_count"
.CLASS 83
.VALUE _count
.TYPE 12
.ENDEF
	SEGMENT DATA
_bgColor:
	DB	136
.DEFINE "bgColor"
.ALIAS "_bgColor"
.CLASS 69
.VALUE _bgColor
.TYPE 12
.ENDEF
_cpf:
	DB	10
.DEFINE "cpf"
.ALIAS "_cpf"
.CLASS 69
.VALUE _cpf
.TYPE 12
.ENDEF
_frameCount:
	DB	0
.DEFINE "frameCount"
.ALIAS "_frameCount"
.CLASS 69
.VALUE _frameCount
.TYPE 12
.ENDEF
_fgIndex:
	DB	1
.DEFINE "fgIndex"
.ALIAS "_fgIndex"
.CLASS 69
.VALUE _fgIndex
.TYPE 12
.ENDEF
_bgIndex:
	DB	0
.DEFINE "bgIndex"
.ALIAS "_bgIndex"
.CLASS 69
.VALUE _bgIndex
.TYPE 12
.ENDEF
	SEGMENT STRSECT
L__0:
	DB	"[2nd] - Pause"
	DB	0
	SEGMENT DATA
_pauseText:
	DW24	L__0
.DEFINE "pauseText"
.ALIAS "_pauseText"
.CLASS 69
.VALUE _pauseText
.TYPE 194
.ENDEF
	SEGMENT STRSECT
L__1:
	DB	"Decimal"
	DB	0
L__2:
	DB	"Seven"
	DB	0
L__3:
	DB	"Eight"
	DB	0
L__4:
	DB	"Nine"
	DB	0
L__5:
	DB	"Four"
	DB	0
L__6:
	DB	"Five"
	DB	0
L__7:
	DB	"Six"
	DB	0
L__8:
	DB	"One"
	DB	0
L__9:
	DB	"Two"
	DB	0
L__10:
	DB	"Three"
	DB	0
L__11:
	DB	"Zero"
	DB	0
L__12:
	DB	"Negative"
	DB	0
L__13:
	DB	"Times"
	DB	0
L__14:
	DB	"Plus"
	DB	0
L__15:
	DB	"Minus"
	DB	0
L__16:
	DB	"Enter"
	DB	0
	SEGMENT DATA
_keyNames:
	DW24	L__1
	DW24	L__2
	DW24	L__3
	DW24	L__4
	DW24	L__5
	DW24	L__6
	DW24	L__7
	DW24	L__8
	DW24	L__9
	DW24	L__10
	DW24	L__11
	DW24	L__12
	DW24	L__13
	DW24	L__14
	DW24	L__15
	DW24	L__16
.DEFINE "keyNames"
.ALIAS "_keyNames"
.CLASS 69
.VALUE _keyNames
.DIM 16
.TYPE 1634
.ENDEF
	SEGMENT TEXT
_palette_colors:
	DW	0
	DW	14269
	DW	44099
	DW	37228
	DW	37070
	DW	65535
	DW	65518
	DW	46655
	DW	3299
	DW	57079
	DW	46500
	DW	64991
	DW	24063
	DW	45164
	DW	10466
	DW	65292
	DW	41068
	DW	58632
	DW	13997
	DW	5285
.DEFINE "palette_colors"
.ALIAS "_palette_colors"
.CLASS 84
.VALUE _palette_colors
.DIM 20
.TYPE 109
.ENDEF
	SEGMENT BSS
_settings:
	DS	1
.DEFINE "settings"
.ALIAS "_settings"
.CLASS 83
.VALUE _settings
.TYPE 12
.ENDEF
.BEGREC "NONAME16",3
.DEFINE "fgColor"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "bgColor"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cpf"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME16"
_data:
	DS	3
.DEFINE "data"
.ALIAS "_data"
.CLASS 83
.VALUE _data
.TAG "NONAME16"
.TYPE 8
.ENDEF
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <debug.h>
;    6	
;    7	#include <math.h>
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	
;   12	#include <graphx.h>
;   13	#include <keypadc.h>
;   14	#include <fileioc.h>
;   15	
;   16	#include "chip8.h"
;   17	#include "sprites_gfx.h"
;   18	
;   19	void drawGraphics(void);
;   20	void startEmulation(char *fileName);
;   21	void drawMenu(uint8_t start);
;   22	void drawKeymappingMenu(uint8_t selected);
;   23	void beginKeymapper(char *fileName);
;   24	void beginSetClock(void);
;   25	void drawPreview(uint8_t x, uint8_t y);
;   26	
;   27	ti_var_t curFile;
;   28	
;   29	char files[255][9];
;   30	uint8_t count;
;   31	
;   32	uint8_t bgColor = 0x88;
;   33	uint8_t cpf = 10;
;   34	
;   35	uint8_t frameCount = 0;
;   36	
;   37	uint8_t fgIndex = 1;
;   38	uint8_t bgIndex = 0;
;   39	
;   40	const char *pauseText = "[2nd] - Pause";
;   41	const char *keyNames[16] = {
;   42		"Decimal",
;   43		"Seven",
;   44		"Eight",
;   45		"Nine",
;   46		"Four",
;   47		"Five",
;   48		"Six",
;   49		"One",
;   50		"Two",
;   51		"Three",
;   52		"Zero",
;   53		"Negative",
;   54		"Times",
;   55		"Plus",
;   56		"Minus",
;   57		"Enter"
;   58	};
;   59	
;   60	const uint16_t palette_colors[20] = {
;   61	 0x0000,  // 00 :: rgb(0,0,1)
;   62	 0x37BD,  // 01 :: rgb(108,234,239)
;   63	 0xAC43,  // 02 :: rgb(92,21,21)
;   64	 0x916C,  // 03 :: rgb(30,95,97)
;   65	 0x90CE,  // 04 :: rgb(35,51,113)
;   66	 0xFFFF,  // 05 :: rgb(255,255,255)
;   67	 0xFFEE,  // 06 :: rgb(255,253,113)
;   68	 0xB63F,  // 07 :: rgb(111,141,253)
;   69	 0x0CE3,  // 08 :: rgb(25,55,25)
;   70	 0xDEF7,  // 09 :: rgb(191,191,191)
;   71	 0xB5A4,  // 10 :: rgb(110,109,34)
;   72	 0xFDDF,  // 11 :: rgb(255,118,253)
;   73	 0x5DFF,  // 12 :: rgb(188,122,255)
;   74	 0xB06C,  // 13 :: rgb(98,28,97)
;   75	 0x28E2,  // 14 :: rgb(80,58,18)
;   76	 0xFF0C,  // 15 :: rgb(252,197,102)
;   77	 0xA06C,  // 16 :: rgb(63,28,99)
;   78	 0xE508,  // 17 :: rgb(203,68,68)
;   79	 0x36AD,  // 18 :: rgb(110,172,110)
;   80	 0x14A5,  // 19 :: rgb(39,39,39)
;   81	};
;   82	
;   83	ti_var_t settings;
;   84	typedef struct {
;   85		uint8_t fgColor;
;   86	    uint8_t bgColor;
;   87	    uint8_t cpf;
;   88	} data_t;
;   89	data_t data;
	SEGMENT CODE
;   90	
;   91	void main(void) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "main",91,"_main"

.LINE 91

.DEFINE "startPos"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "varName"

.CLASS 65

.VALUE -4

.TYPE 34

.ENDEF

.DEFINE "search_pos"

.CLASS 65

.VALUE -7

.TYPE 44

.ENDEF

.DEFINE "test1"

.CLASS 65

.VALUE -23

.DIM 16

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-29
	LD	SP,HL
;   92		uint8_t i;
;   93		char *varName;
;   94		uint8_t *search_pos = NULL;
.LINE 94

	LD	BC,0
	LD	(IX+-7),BC
;   95		uint8_t startPos = 0;
.LINE 95

	LD	(IX+-1),0
;   96		uint8_t test1[16] = {0x00,0x01,0x02,0x03,0x06,0x05,0x04,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
.LINE 96

	LEA	DE,IX+-23
	LD	HL,_0temp0
	LD	BC,16
	LDIR	
;   97		
;   98		boot_Set48MHzMode();
.LINE 98

	CALL	_boot_Set48MHzMode
;   99		
;  100		ti_CloseAll();
.LINE 100

	CALL	_ti_CloseAll
;  101		settings = ti_Open("C84SET", "r");
.LINE 101

	LD	BC,L__17
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(_settings),A
;  102		dbg_sprintf(dbgout, "%d", ti_GetSize(settings));
.LINE 102

	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetSize
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	PUSH	HL
	LD	BC,L__19
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  103		if(settings == 0) {
.LINE 103

	LD	A,(_settings)
	OR	A,A
	JR	NZ,L_2
;  104			ti_CloseAll();
.LINE 104

	CALL	_ti_CloseAll
;  105			settings = ti_Open("C84SET", "w");
.LINE 105

	LD	BC,L__21
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(_settings),A
;  106			data.fgColor = 0x1;
.LINE 106

	LD	A,1
	LD	(_data),A
;  107			data.bgColor = 0x0;
.LINE 107

	XOR	A,A
	LD	(_data+1),A
;  108			data.cpf = 20;
.LINE 108

	LD	A,20
	LD	(_data+2),A
;  109			ti_Write(&data, sizeof(data_t), 1, settings);
.LINE 109

	LD	A,(_settings)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_data
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  110			ti_Rewind(settings);
.LINE 110

	LD	A,(_settings)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  111		}
L_2:
.LINE 111

;  112		ti_Read(&data, sizeof(data_t), 1, settings);
.LINE 112

	LD	A,(_settings)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_data
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  113		fgIndex = data.fgColor;
.LINE 113

	LD	A,(_data)
	LD	(_fgIndex),A
;  114		bgIndex = data.bgColor;
.LINE 114

	LD	A,(_data+1)
	LD	(_bgIndex),A
;  115		cpf = data.cpf;
.LINE 115

	LD	A,(_data+2)
	LD	(_cpf),A
;  116		sprites_gfx_pal[0] = palette_colors[bgIndex];
.LINE 116

	LD	A,(_bgIndex)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_palette_colors
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,_sprites_gfx_pal
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  117		sprites_gfx_pal[1] = palette_colors[fgIndex];
.LINE 117

	LD	A,(_fgIndex)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_palette_colors
	ADD	HL,BC
	LD	(IX+-29),HL	; spill
	LD	HL,_sprites_gfx_pal+2
	LD	(IX+-26),HL	; spill
	LD	HL,(IX+-29)	; unspill
	LD	BC,(HL)
	LD	HL,(IX+-26)	; unspill
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  118		
;  119		count = 0;
.LINE 119

	XOR	A,A
	LD	(_count),A
;  120		
;  121		gfx_Begin(gfx_8bpp);
.LINE 121

	LD	BC,39
	PUSH	BC
	CALL	_gfx_Begin
	POP	BC
;  122		gfx_Blit(gfx_screen);
.LINE 122

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  123	    gfx_SetDrawBuffer();
.LINE 123

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  124		gfx_SetPalette(sprites_gfx_pal, sizeof_sprites_gfx_pal, 0);
.LINE 124

	LD	BC,0
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,_sprites_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  125		gfx_SetColor(0x03);
.LINE 125

	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  126		
;  127		gfx_SetTextFGColor(0x02);
.LINE 127

	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  128		gfx_SetTextScale(2, 2);
.LINE 128

	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  129		gfx_PrintStringXY("Chip-84", 103, 95);
.LINE 129

	LD	BC,95
	PUSH	BC
	LD	BC,103
	PUSH	BC
	LD	BC,L__23
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  130		gfx_SetTextScale(1, 1);
.LINE 130

	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  131		gfx_PrintStringXY("2018 Christian Kosman", 80, 120);
.LINE 131

	LD	BC,120
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  132		gfx_PrintStringXY("version 2.3.0", LCD_WIDTH-100, LCD_HEIGHT-30);
.LINE 132

	LD	BC,210
	PUSH	BC
	LD	BC,220
	PUSH	BC
	LD	BC,L__25
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  133		gfx_BlitBuffer();
.LINE 133

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  134		
;  135		delay(1000);
.LINE 135

	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  136		
;  137		while((varName = ti_Detect(&search_pos, "Chip84")) != NULL) {
.LINE 137

	JR	L_3
L_4:
;  138			strcpy(files[count], varName);
.LINE 138

	LD	BC,(IX+-4)
	PUSH	BC
	LD	A,(_count)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_strcpy
	POP	BC
	POP	BC
;  139			++count;
.LINE 139

	LD	A,(_count)
	INC	A
	LD	(_count),A
;  140		}
L_3:
.LINE 140

	LD	BC,L__26
	PUSH	BC
	PEA	IX+-7
	CALL	_ti_Detect
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	CALL	__icmpzero
	JR	NZ,L_4
;  141		
;  142		drawMenu(0);
.LINE 142

	LD	BC,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  143		
;  144		do {
L_27:
.LINE 144

;  145			kb_Scan();
.LINE 145

	CALL	_kb_Scan
;  146			
;  147			if(kb_Data[7] & kb_Up) {
.LINE 147

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_18
;  148				frameCount = 0;
.LINE 148

	XOR	A,A
	LD	(_frameCount),A
;  149				if(startPos == 0)
.LINE 149

	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_8
;  150					startPos = count-1;
.LINE 150

	LD	A,(_count)
	DEC	A
	LD	(IX+-1),A
;  151				else
.LINE 151

	JR	L_9
L_8:
;  152					startPos--;
.LINE 152

	DEC	(IX+-1)
L_9:
;  153				drawMenu(startPos);
.LINE 153

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  154			} else if(kb_Data[7] & kb_Down) {
.LINE 154

	JR	L_25
L_18:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_16
;  155				frameCount = 0;
.LINE 155

	XOR	A,A
	LD	(_frameCount),A
;  156				if(startPos == count-1)
.LINE 156

	LD	A,(_count)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_12
;  157					startPos = 0;
.LINE 157

	LD	(IX+-1),0
;  158				else
.LINE 158

	JR	L_13
L_12:
;  159					startPos++;
.LINE 159

	INC	(IX+-1)
L_13:
;  160				drawMenu(startPos);
.LINE 160

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  161			} else if(kb_Data[6] & kb_Enter) {
.LINE 161

	JR	L_25
L_16:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_25
;  162				gfx_FillScreen(0xFF);
.LINE 162

	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  163				startEmulation(files[startPos]);
.LINE 163

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_startEmulation
	POP	BC
;  164				drawMenu(startPos);
.LINE 164

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  165			}
L_25:
.LINE 165

;  166			
;  167			if(frameCount > 9) {
.LINE 167

	LD	A,9
	LD	HL,_frameCount
	CP	A,(HL)
	JR	NC,L_24
;  168				if(frameCount < 100) {
.LINE 168

	LD	A,(_frameCount)
	CP	A,100
	JR	NC,L_20
;  169					frameCount = 101;
.LINE 169

	LD	A,101
	LD	(_frameCount),A
;  170					loadProgram(files[startPos]);
.LINE 170

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_loadProgram
	POP	BC
;  171					gfx_PrintStringXY("Preview", 187, 60);
.LINE 171

	LD	BC,60
	PUSH	BC
	LD	BC,187
	PUSH	BC
	LD	BC,L__35
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  172				}
L_20:
.LINE 172

;  173				emulateCycle(20);
.LINE 173

	LD	BC,20
	PUSH	BC
	CALL	_emulateCycle
	POP	BC
;  174				
;  175				if(drawFlag)
.LINE 175

	LD	A,(_drawFlag)
	OR	A,A
	JR	Z,L_26
;  176					drawPreview(150, 70);
.LINE 176

	LD	BC,70
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_drawPreview
	POP	BC
	POP	BC
;  177			} else {
.LINE 177

	JR	L_26
L_24:
;  178				frameCount++;
.LINE 178

	LD	A,(_frameCount)
	INC	A
	LD	(_frameCount),A
;  179				delay(100);
.LINE 179

	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  180			}
L_26:
.LINE 180

;  181			
;  182			gfx_BlitBuffer();
.LINE 182

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  183		} while (kb_Data[6] != kb_Clear);
.LINE 183

	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_27
;  184		
;  185		gfx_End();
.LINE 185

	CALL	_gfx_End
;  186	}
.LINE 186

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_drawPreview                        IMPORT  -----   function
;_drawFlag                           IMPORT      1   variable
;_emulateCycle                       IMPORT  -----   function
;_loadProgram                        IMPORT  -----   function
;_startEmulation                     IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_frameCount                         STATIC      1   variable
;_kb_Scan                            IMPORT  -----   function
;_drawMenu                           IMPORT  -----   function
;_ti_Detect                          IMPORT  -----   function
;_files                              STATIC   2295   variable
;_strcpy                             IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_count                              STATIC      1   variable
;_sprites_gfx_pal                    IMPORT     12   variable
;_palette_colors                     STATIC     40   variable
;_cpf                                STATIC      1   variable
;_bgIndex                            STATIC      1   variable
;_fgIndex                            STATIC      1   variable
;_ti_Read                            IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_data                               STATIC      3   variable
;_ti_GetSize                         IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_settings                           STATIC      1   variable
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_boot_Set48MHzMode                  IMPORT  -----   function
;_0temp0                             STATIC     16   variable
;test1                                IX-23     16   variable
;search_pos                            IX-7      3   variable
;varName                               IX-4      3   variable
;startPos                              IX-1      1   variable


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",186,"_main"
	SEGMENT STRSECT
L__17:
	DB	"r"
	DB	0
L__18:
	DB	"C84SET"
	DB	0
L__19:
	DB	"%d"
	DB	0
L__21:
	DB	"w"
	DB	0
L__22:
	DB	"C84SET"
	DB	0
L__23:
	DB	"Chip-84"
	DB	0
L__24:
	DB	"2018 Christian Kosman"
	DB	0
L__25:
	DB	"version 2.3.0"
	DB	0
L__26:
	DB	"Chip84"
	DB	0
L__35:
	DB	"Preview"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	6
	DB	5
	DB	4
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	15
	SEGMENT CODE
;  187	
;  188	void drawMenu(uint8_t start) {
_drawMenu:
.DEFINE "_drawMenu"

.VALUE _drawMenu

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawMenu",188,"_drawMenu"

.LINE 188

.DEFINE "start"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  189		uint8_t i;
;  190		gfx_FillScreen(0xff);
.LINE 190

	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  191		gfx_SetTextFGColor(0x02);
.LINE 191

	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  192		for(i = 0; i < 16; i++) {
.LINE 192

	LD	(IX+-1),0
	JR	L_35
L_33:
;  193			if(i + start <= count-1) {
.LINE 193

	LD	A,(_count)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JP	M,L_34
;  194				gfx_PrintStringXY(files[i+start], 30, 10*i+50);
.LINE 194

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+50
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  195			}
;  196		}
L_34:
.LINE 196

	INC	(IX+-1)
L_35:
	LD	A,(IX+-1)
	CP	A,16
	JR	C,L_33
;  197		gfx_PrintStringXY(">",20,50);
.LINE 197

	LD	BC,50
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  198		
;  199		gfx_SetTextScale(2,2);
.LINE 199

	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  200		gfx_PrintStringXY("Select a ROM", 20, 20);
.LINE 200

	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__42
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  201		gfx_SetTextScale(1,1);
.LINE 201

	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  202		gfx_PrintStringXY("[clear] - Quit", 220, 220);
.LINE 202

	LD	BC,220
	PUSH	BC
	PUSH	BC
	LD	BC,L__43
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  203		
;  204	}
.LINE 204

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawMenu ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetTextScale                   IMPORT  -----   function
;_files                              STATIC   2295   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_count                              STATIC      1   variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;i                                     IX-1      1   variable
;start                                 IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawMenu",204,"_drawMenu"
	SEGMENT STRSECT
L__41:
	DB	">"
	DB	0
L__42:
	DB	"Select a ROM"
	DB	0
L__43:
	DB	"[clear] - Quit"
	DB	0
	SEGMENT CODE
;  205	
;  206	void startEmulation(char *fileName) {
_startEmulation:
.DEFINE "_startEmulation"

.VALUE _startEmulation

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "startEmulation",206,"_startEmulation"

.LINE 206

.DEFINE "fileName"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "selected_option"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;  207		
;  208		loadProgram(fileName);
.LINE 208

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_loadProgram
	POP	BC
;  209		
;  210		gfx_FillScreen(bgColor);
.LINE 210

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  211		gfx_SetTextFGColor(0x03);
.LINE 211

	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  212		gfx_PrintStringXY(pauseText, 10, LCD_HEIGHT-20);
.LINE 212

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_pauseText)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  213		
;  214		do {
L_99:
.LINE 214

;  215			emulateCycle(cpf);
.LINE 215

	LD	A,(_cpf)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_emulateCycle
	POP	BC
;  216			
;  217			if(drawFlag)
.LINE 217

	LD	A,(_drawFlag)
	OR	A,A
	JR	Z,L_39
;  218				drawGraphics();
.LINE 218

	CALL	_drawGraphics
L_39:
;  219			
;  220			gfx_BlitBuffer();
.LINE 220

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  221			if(paused) {
.LINE 221

	LD	A,(_paused)
	OR	A,A
	JR	Z,L_100
;  222				uint8_t selected_option = 0;
.LINE 222

	LD	(IX+-1),0
;  223				
;  224				gfx_FillScreen(bgColor);
.LINE 224

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  225				drawPreview(170,135);
.LINE 225

	LD	BC,135
	PUSH	BC
	LD	BC,170
	PUSH	BC
	CALL	_drawPreview
	POP	BC
	POP	BC
;  226				gfx_SetTextScale(2, 2);
.LINE 226

	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  227				gfx_PrintStringXY("Paused", 20, 20);
.LINE 227

	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  228				gfx_SetTextScale(1, 1);
.LINE 228

	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  229				gfx_PrintStringXY("Keymapping", 20, 50);
.LINE 229

	LD	BC,50
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  230				gfx_PrintStringXY("Cycles per frame -", 20, 60);
.LINE 230

	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__49
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  231				gfx_PrintStringXY("Foreground color -", 20, 70);
.LINE 231

	LD	BC,70
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__50
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  232				gfx_PrintStringXY("Background color -", 20, 80);
.LINE 232

	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  233				gfx_PrintStringXY("Resume", 20, 90);
.LINE 233

	LD	BC,90
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__52
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  234				gfx_PrintStringXY("Quit game", 20, 100);
.LINE 234

	LD	BC,100
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__53
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  235				gfx_BlitBuffer();
.LINE 235

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  236				gfx_SetColor(bgColor);
.LINE 236

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  237				while(paused) {
.LINE 237

	JR	L_96
L_97:
;  238					kb_Scan();
.LINE 238

	CALL	_kb_Scan
;  239					
;  240					gfx_FillRectangle(10, 50 + selected_option*10, 10, 10);
.LINE 240

	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+50
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  241					
;  242					if(kb_Data[7] & kb_Up) {
.LINE 242

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_46
;  243						selected_option--;
.LINE 243

	DEC	(IX+-1)
;  244						if(selected_option == 255) selected_option = 5;
.LINE 244

	LD	A,(IX+-1)
	CP	A,255
	JR	NZ,L_46
	LD	(IX+-1),5
;  245					}
L_46:
.LINE 245

;  246					if(kb_Data[7] & kb_Down) {
.LINE 246

	LD	A,(16056350)
	AND	A,1
	JR	Z,L_47
;  247						selected_option++;
.LINE 247

	INC	(IX+-1)
;  248						if(selected_option == 6) selected_option = 0;
.LINE 248

	LD	A,(IX+-1)
	CP	A,6
	JR	NZ,L_47
	LD	(IX+-1),0
;  249					}
L_47:
.LINE 249

;  250					
;  251					gfx_PrintStringXY(">", 10, 50 + selected_option*10);
.LINE 251

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+50
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__58
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  252					
;  253					if(selected_option == 0) {
.LINE 253

	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_58
;  254						if(kb_Data[6] & kb_Enter) {
.LINE 254

	LD	A,(16056348)
	AND	A,1
	JR	Z,L_58
;  255							beginKeymapper(fileName);
.LINE 255

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_beginKeymapper
	POP	BC
;  256							gfx_PrintStringXY(pauseText, 10, LCD_HEIGHT-20);
.LINE 256

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_pauseText)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  257						}
;  258					}
L_58:
.LINE 258

;  259					
;  260					if(selected_option == 1) {
.LINE 260

	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_59
;  261						if(kb_Data[7] & kb_Left) {
.LINE 261

	LD	A,(16056350)
	AND	A,2
	JR	Z,L_56
;  262							cpf--;
.LINE 262

	LD	A,(_cpf)
	DEC	A
	LD	(_cpf),A
;  263							if(cpf == 0) cpf = 50;
.LINE 263

	OR	A,A
	JR	NZ,L_56
	LD	A,50
	LD	(_cpf),A
;  264						}
L_56:
.LINE 264

;  265						if(kb_Data[7] & kb_Right) {
.LINE 265

	LD	A,(16056350)
	AND	A,4
	JR	Z,L_59
;  266							cpf++;
.LINE 266

	LD	A,(_cpf)
	INC	A
	LD	(_cpf),A
;  267							if(cpf == 51) cpf = 1;
.LINE 267

	CP	A,51
	JR	NZ,L_59
	LD	A,1
	LD	(_cpf),A
;  268						}
;  269					}
L_59:
.LINE 269

;  270					gfx_FillRectangle(150, 60, 30, 30);
.LINE 270

	LD	BC,30
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  271					gfx_SetTextXY(150, 60);
.LINE 271

	LD	BC,60
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  272					gfx_PrintUInt(cpf, 2);
.LINE 272

	LD	BC,2
	PUSH	BC
	LD	A,(_cpf)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  273					
;  274					if(selected_option == 2) {
.LINE 274

	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_69
;  275						if(kb_Data[7] & kb_Left) {
.LINE 275

	LD	A,(16056350)
	AND	A,2
	JR	Z,L_66
;  276							fgIndex--;
.LINE 276

	LD	A,(_fgIndex)
	DEC	A
	LD	(_fgIndex),A
;  277							if(fgIndex == 255) fgIndex = 19;
.LINE 277

	CP	A,255
	JR	NZ,L_66
	LD	A,19
	LD	(_fgIndex),A
;  278						}
L_66:
.LINE 278

;  279						if(kb_Data[7] & kb_Right) {
.LINE 279

	LD	A,(16056350)
	AND	A,4
	JR	Z,L_67
;  280							fgIndex++;
.LINE 280

	LD	A,(_fgIndex)
	INC	A
	LD	(_fgIndex),A
;  281							if(fgIndex == 20) fgIndex = 0;
.LINE 281

	CP	A,20
	JR	NZ,L_67
	XOR	A,A
	LD	(_fgIndex),A
;  282						}
L_67:
.LINE 282

;  283						sprites_gfx_pal[1] = palette_colors[fgIndex];
.LINE 283

	LD	A,(_fgIndex)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_palette_colors
	ADD	HL,BC
	LD	(IX+-7),HL	; spill
	LD	HL,_sprites_gfx_pal+2
	LD	IY,(IX+-7)	; unspill
	LD	BC,(IY)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  284						gfx_SetPalette(sprites_gfx_pal, sizeof_sprites_gfx_pal, 0);
.LINE 284

	LD	BC,0
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,_sprites_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  285						drawPreview(170,135);
.LINE 285

	LD	BC,135
	PUSH	BC
	LD	BC,170
	PUSH	BC
	CALL	_drawPreview
	POP	BC
	POP	BC
;  286					}
L_69:
.LINE 286

;  287					gfx_SetColor(0x01);
.LINE 287

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  288					gfx_FillRectangle(153, 70, 8, 8);
.LINE 288

	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,153
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  289					gfx_SetColor(bgColor);
.LINE 289

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  290					
;  291					if(selected_option == 3) {
.LINE 291

	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_79
;  292						if(kb_Data[7] & kb_Left) {
.LINE 292

	LD	A,(16056350)
	AND	A,2
	JR	Z,L_76
;  293							bgIndex--;
.LINE 293

	LD	A,(_bgIndex)
	DEC	A
	LD	(_bgIndex),A
;  294							if(bgIndex == 255) bgIndex = 19;
.LINE 294

	CP	A,255
	JR	NZ,L_76
	LD	A,19
	LD	(_bgIndex),A
;  295						}
L_76:
.LINE 295

;  296						if(kb_Data[7] & kb_Right) {
.LINE 296

	LD	A,(16056350)
	AND	A,4
	JR	Z,L_77
;  297							bgIndex++;
.LINE 297

	LD	A,(_bgIndex)
	INC	A
	LD	(_bgIndex),A
;  298							if(bgIndex == 20) bgIndex = 0;
.LINE 298

	CP	A,20
	JR	NZ,L_77
	XOR	A,A
	LD	(_bgIndex),A
;  299						}
L_77:
.LINE 299

;  300						sprites_gfx_pal[0] = palette_colors[bgIndex];
.LINE 300

	LD	A,(_bgIndex)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_palette_colors
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,_sprites_gfx_pal
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  301						gfx_SetPalette(sprites_gfx_pal, sizeof_sprites_gfx_pal, 0);
.LINE 301

	LD	BC,0
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,_sprites_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  302						drawPreview(170,135);
.LINE 302

	LD	BC,135
	PUSH	BC
	LD	BC,170
	PUSH	BC
	CALL	_drawPreview
	POP	BC
	POP	BC
;  303					}
L_79:
.LINE 303

;  304					gfx_SetColor(0x00);
.LINE 304

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  305					gfx_FillRectangle(153, 80, 8, 8);
.LINE 305

	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,153
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  306					gfx_SetColor(bgColor);
.LINE 306

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  307					
;  308					if(kb_Data[6] & kb_Clear || (selected_option == 5 && kb_Data[6] & kb_Enter)) {
.LINE 308

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_83
	LD	A,(IX+-1)
	CP	A,5
	JR	NZ,L_94
	LD	A,(16056348)
	AND	A,1
	JR	NZ,L_83
	JR	L_94
;  309						while(kb_Data[6] & kb_Clear || kb_Data[6] & kb_Enter) {
L_84:
.LINE 309

;  310							kb_ScanGroup(6);
.LINE 310

	LD	BC,6
	PUSH	BC
	CALL	_kb_ScanGroup
	POP	BC
;  311						}
L_83:
.LINE 311

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_84
	LD	A,(16056348)
	AND	A,1
	JR	NZ,L_84
;  312						playing = false;
.LINE 312

	XOR	A,A
	LD	(_playing),A
;  313						break;
.LINE 313

	JR	L_100
;  314					}
L_94:
.LINE 314

;  315					if(kb_Data[1] & kb_2nd || (selected_option == 4 && kb_Data[6] & kb_Enter)) {
.LINE 315

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_90
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_95
	LD	A,(16056348)
	AND	A,1
	JR	NZ,L_90
	JR	L_95
;  316						while(kb_Data[1] & kb_2nd || kb_Data[6] & kb_Enter) {
L_91:
.LINE 316

;  317							kb_Scan();
.LINE 317

	CALL	_kb_Scan
;  318						}
L_90:
.LINE 318

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_91
	LD	A,(16056348)
	AND	A,1
	JR	NZ,L_91
;  319						paused = false;
.LINE 319

	XOR	A,A
	LD	(_paused),A
;  320						gfx_SetColor(bgColor);
.LINE 320

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  321						gfx_FillScreen(bgColor);
.LINE 321

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  322						drawGraphics();
.LINE 322

	CALL	_drawGraphics
;  323						gfx_PrintStringXY(pauseText, 10, LCD_HEIGHT-20);
.LINE 323

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_pauseText)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  324						
;  325						ti_CloseAll();
.LINE 325

	CALL	_ti_CloseAll
;  326						settings = ti_Open("C84SET", "w");
.LINE 326

	LD	BC,L__86
	PUSH	BC
	LD	BC,L__87
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(_settings),A
;  327						data.fgColor = fgIndex;
.LINE 327

	LD	A,(_fgIndex)
	LD	(_data),A
;  328						data.bgColor = bgIndex;
.LINE 328

	LD	A,(_bgIndex)
	LD	(_data+1),A
;  329						data.cpf = cpf;
.LINE 329

	LD	A,(_cpf)
	LD	(_data+2),A
;  330						ti_Write(&data, sizeof(data_t), 1, settings);
.LINE 330

	LD	A,(_settings)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_data
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  331					}
L_95:
.LINE 331

;  332					
;  333					gfx_BlitBuffer();
.LINE 333

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  334					delay(100);
.LINE 334

	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  335				}
L_96:
.LINE 335

	LD	A,(_paused)
	OR	A,A
	JR	NZ,L_97
;  336			}
;  337		} while (playing);
L_100:
.LINE 337

	LD	A,(_playing)
	OR	A,A
	JR	NZ,L_99
;  338	}
.LINE 338

	LD	SP,IX
	POP	IX
	RET	


;**************************** _startEmulation ***************************
;Name                         Addr/Register   Size   Type
;_delay                              IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_data                               STATIC      3   variable
;_settings                           STATIC      1   variable
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_playing                            IMPORT      1   variable
;_kb_ScanGroup                       IMPORT  -----   function
;_bgIndex                            STATIC      1   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_sprites_gfx_pal                    IMPORT     12   variable
;_palette_colors                     STATIC     40   variable
;_fgIndex                            STATIC      1   variable
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_beginKeymapper                     IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_drawPreview                        IMPORT  -----   function
;_paused                             IMPORT      1   variable
;_gfx_Blit                           IMPORT  -----   function
;_drawGraphics                       IMPORT  -----   function
;_drawFlag                           IMPORT      1   variable
;_cpf                                STATIC      1   variable
;_emulateCycle                       IMPORT  -----   function
;_pauseText                          STATIC      3   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_loadProgram                        IMPORT  -----   function
;selected_option                       IX-1      1   variable
;fileName                              IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "startEmulation",338,"_startEmulation"
	SEGMENT STRSECT
L__47:
	DB	"Paused"
	DB	0
L__48:
	DB	"Keymapping"
	DB	0
L__49:
	DB	"Cycles per frame -"
	DB	0
L__50:
	DB	"Foreground color -"
	DB	0
L__51:
	DB	"Background color -"
	DB	0
L__52:
	DB	"Resume"
	DB	0
L__53:
	DB	"Quit game"
	DB	0
L__58:
	DB	">"
	DB	0
L__86:
	DB	"w"
	DB	0
L__87:
	DB	"C84SET"
	DB	0
	SEGMENT CODE
;  339	
;  340	void beginKeymapper(char *fileName) {
_beginKeymapper:
.DEFINE "_beginKeymapper"

.VALUE _beginKeymapper

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "beginKeymapper",340,"_beginKeymapper"

.LINE 340

.DEFINE "fileName"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "selected"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "awaiting"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  341		uint8_t selected = 0;
.LINE 341

	LD	(IX+-1),0
;  342		uint8_t i;
;  343		bool awaiting = false;
.LINE 343

	LD	(IX+-3),0
;  344		
;  345		drawKeymappingMenu(selected);
.LINE 345

	LD	BC,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  346		
;  347		do {
L_129:
.LINE 347

;  348			kb_Scan();
.LINE 348

	CALL	_kb_Scan
;  349			if(!awaiting) {
.LINE 349

	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_128
;  350				if(kb_Data[7] & kb_Down) {
.LINE 350

	LD	A,(16056350)
	AND	A,1
	JR	Z,L_111
;  351					selected++;
.LINE 351

	INC	(IX+-1)
;  352					if(selected > 16) selected = 0;
.LINE 352

	LD	A,16
	CP	A,(IX+-1)
	JR	NC,L_104
	LD	(IX+-1),0
L_104:
;  353					drawKeymappingMenu(selected);
.LINE 353

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  354				}
L_111:
.LINE 354

;  355				if(kb_Data[7] & kb_Up) {
.LINE 355

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_113
;  356					if(selected == 0)
.LINE 356

	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_108
;  357						selected = 16;
.LINE 357

	LD	(IX+-1),16
;  358					else
.LINE 358

	JR	L_109
L_108:
;  359						selected--;
.LINE 359

	DEC	(IX+-1)
L_109:
;  360					drawKeymappingMenu(selected);
.LINE 360

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  361				}
L_113:
.LINE 361

;  362				if(kb_Data[6] & kb_Enter) {
.LINE 362

	LD	A,(16056348)
	AND	A,1
	JR	Z,L_120
;  363					drawKeymappingMenu(selected+16);
.LINE 363

	LD	A,(IX+-1)
	ADD	A,16
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  364					awaiting = 1;
.LINE 364

	LD	(IX+-3),1
;  365				}
L_120:
.LINE 365

;  366				if(kb_Data[1] & kb_2nd) {
.LINE 366

	LD	A,(16056338)
	AND	A,32
	JR	Z,L_121
;  367					for(i = 0; i < 16; i++) {
.LINE 367

	LD	(IX+-2),0
	JR	L_117
L_115:
;  368						game_data[i+6] = i;
.LINE 368

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,_game_data
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
;  369						controlMap[i] = i;
.LINE 369

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,_controlMap
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
	INC	(IX+-2)
;  370					}
L_117:
.LINE 370

	LD	A,(IX+-2)
	CP	A,16
	JR	C,L_115
;  371					drawKeymappingMenu(selected);
.LINE 371

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  372				}
L_121:
.LINE 372

;  373				delay(100);
.LINE 373

	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  374			} else {
.LINE 374

	JR	L_130
L_128:
;  375				keypad[0x0] = kb_Data[4] & kb_DecPnt;
.LINE 375

	LD	A,(16056344)
	AND	A,1
	LD	(_keypad),A
;  376				keypad[0x1] = kb_Data[3] & kb_7;
.LINE 376

	LD	A,(16056342)
	AND	A,8
	LD	HL,_keypad
	INC	HL
	LD	(HL),A
;  377				keypad[0x2] = kb_Data[4] & kb_8;
.LINE 377

	LD	A,(16056344)
	AND	A,8
	LD	IY,_keypad
	LEA	HL,IY+2
	LD	(HL),A
;  378				keypad[0x3] = kb_Data[5] & kb_9;
.LINE 378

	LD	A,(16056346)
	AND	A,8
	LEA	HL,IY+3
	LD	(HL),A
;  379				keypad[0x4] = kb_Data[3] & kb_4;
.LINE 379

	LD	A,(16056342)
	AND	A,4
	LEA	HL,IY+4
	LD	(HL),A
;  380				keypad[0x5] = kb_Data[4] & kb_5;
.LINE 380

	LD	A,(16056344)
	AND	A,4
	LEA	HL,IY+5
	LD	(HL),A
;  381				keypad[0x6] = kb_Data[5] & kb_6;
.LINE 381

	LD	A,(16056346)
	AND	A,4
	LEA	HL,IY+6
	LD	(HL),A
;  382				keypad[0x7] = kb_Data[3] & kb_1;
.LINE 382

	LD	A,(16056342)
	AND	A,2
	LEA	HL,IY+7
	LD	(HL),A
;  383				keypad[0x8] = kb_Data[4] & kb_2;
.LINE 383

	LD	A,(16056344)
	AND	A,2
	LEA	HL,IY+8
	LD	(HL),A
;  384				keypad[0x9] = kb_Data[5] & kb_3;
.LINE 384

	LD	A,(16056346)
	AND	A,2
	LEA	HL,IY+9
	LD	(HL),A
;  385				keypad[0xA] = kb_Data[3] & kb_0;
.LINE 385

	LD	A,(16056342)
	AND	A,1
	LEA	HL,IY+10
	LD	(HL),A
;  386				keypad[0xB] = kb_Data[5] & kb_Chs;
.LINE 386

	LD	A,(16056346)
	AND	A,1
	LEA	HL,IY+11
	LD	(HL),A
;  387				keypad[0xC] = kb_Data[6] & kb_Mul;
.LINE 387

	LD	A,(16056348)
	AND	A,8
	LEA	HL,IY+12
	LD	(HL),A
;  388				keypad[0xD] = kb_Data[6] & kb_Sub;
.LINE 388

	LD	A,(16056348)
	AND	A,4
	LEA	HL,IY+13
	LD	(HL),A
;  389				keypad[0xE] = kb_Data[6] & kb_Add;
.LINE 389

	LD	A,(16056348)
	AND	A,2
	LEA	HL,IY+14
	LD	(HL),A
;  390				keypad[0xF] = kb_Data[6] & kb_Enter;
.LINE 390

	LD	A,(16056348)
	AND	A,1
	LEA	HL,IY+15
	LD	(HL),A
;  391				
;  392				for(i = 0; i < 16; i++) {
.LINE 392

	LD	(IX+-2),0
	JR	L_126
L_124:
;  393					if(keypad[i]) {
.LINE 393

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,_keypad
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_125
;  394						game_data[selected+6] = i;
.LINE 394

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,_game_data
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
;  395						controlMap[selected] = i;
.LINE 395

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,_controlMap
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
;  396						awaiting = 0;
.LINE 396

	LD	(IX+-3),0
;  397						drawKeymappingMenu(selected);
.LINE 397

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  398					}
;  399				}
L_125:
.LINE 399

	INC	(IX+-2)
L_126:
	LD	A,(IX+-2)
	CP	A,16
	JR	C,L_124
;  400			}
;  401		} while(kb_Data[6] != kb_Clear);
L_130:
.LINE 401

	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_129
;  402		
;  403		while(kb_Data[6] & kb_Clear) {
.LINE 403

	JR	L_131
L_132:
;  404			kb_ScanGroup(6);
.LINE 404

	LD	BC,6
	PUSH	BC
	CALL	_kb_ScanGroup
	POP	BC
;  405		}
L_131:
.LINE 405

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_132
;  406		
;  407		ti_CloseAll();
.LINE 407

	CALL	_ti_CloseAll
;  408		curFile = ti_Open(fileName, "w");
.LINE 408

	LD	BC,L__103
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(_curFile),A
;  409		ti_Write(&game_data, sizeof(game_data)/sizeof(uint8_t), 1, curFile);
.LINE 409

	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3584
	PUSH	BC
	LD	BC,_game_data
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  410		
;  411		gfx_FillScreen(bgColor);
.LINE 411

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  412		gfx_BlitBuffer();
.LINE 412

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  413		paused = false;
.LINE 413

	XOR	A,A
	LD	(_paused),A
;  414	}
.LINE 414

	LD	SP,IX
	POP	IX
	RET	


;**************************** _beginKeymapper ***************************
;Name                         Addr/Register   Size   Type
;_paused                             IMPORT      1   variable
;_gfx_Blit                           IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_curFile                            STATIC      1   variable
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_kb_ScanGroup                       IMPORT  -----   function
;_keypad                             IMPORT     16   variable
;_delay                              IMPORT  -----   function
;_controlMap                         IMPORT     16   variable
;_game_data                          IMPORT   3584   variable
;_kb_Scan                            IMPORT  -----   function
;_drawKeymappingMenu                 IMPORT  -----   function
;awaiting                              IX-3      1   variable
;i                                     IX-2      1   variable
;selected                              IX-1      1   variable
;fileName                              IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "beginKeymapper",414,"_beginKeymapper"
	SEGMENT STRSECT
L__103:
	DB	"w"
	DB	0
	SEGMENT CODE
;  415	
;  416	void drawKeymappingMenu(uint8_t selected) {
_drawKeymappingMenu:
.DEFINE "_drawKeymappingMenu"

.VALUE _drawKeymappingMenu

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawKeymappingMenu",416,"_drawKeymappingMenu"

.LINE 416

.DEFINE "selected"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  417		uint8_t i;
;  418		gfx_FillScreen(bgColor);
.LINE 418

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  419		
;  420		for(i = 0; i < 16; i++) {
.LINE 420

	LD	(IX+-1),0
	JR	L_139
L_137:
;  421			gfx_PrintStringXY("Key", 30, i*10+10);
.LINE 421

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__105
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  422			gfx_SetTextXY(60, i*10+10);
.LINE 422

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  423			gfx_PrintUInt(i, 2);
.LINE 423

	LD	BC,2
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  424			gfx_PrintStringXY(keyNames[game_data[i+6]], 90, i*10+10);
.LINE 424

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,_game_data
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_keyNames
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  425		}
L_139:
.LINE 425

	LD	A,(IX+-1)
	CP	A,16
	JR	C,L_137
;  426		
;  427		gfx_PrintStringXY("Select a key to remap, then press the new key.", 10, 200);
.LINE 427

	LD	BC,200
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__107
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  428		gfx_PrintStringXY("Press 2nd to reset, clear to exit.", 10, 215);
.LINE 428

	LD	BC,215
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__108
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  429		
;  430		gfx_SetColor(0x03);
.LINE 430

	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  431		if(selected > 16) {
.LINE 431

	LD	A,16
	CP	A,(IX+6)
	JR	NC,L_142
;  432			gfx_Circle(13, (selected%16)*10+13, 3);
.LINE 432

	LD	BC,3
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+13
	PUSH	BC
	LD	BC,13
	PUSH	BC
	CALL	_gfx_Circle
	POP	BC
	POP	BC
	POP	BC
;  433		} else {
.LINE 433

	JR	L_143
L_142:
;  434			gfx_FillRectangle(10, (selected%16)*10+10, 6, 6);
.LINE 434

	LD	BC,6
	PUSH	BC
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  435		}
L_143:
.LINE 435

;  436		
;  437		gfx_BlitBuffer();
.LINE 437

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  438	}
.LINE 438

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawKeymappingMenu ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Blit                           IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_Circle                         IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_game_data                          IMPORT   3584   variable
;_keyNames                           STATIC     48   variable
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function
;i                                     IX-1      1   variable
;selected                              IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawKeymappingMenu",438,"_drawKeymappingMenu"
	SEGMENT STRSECT
L__105:
	DB	"Key"
	DB	0
L__107:
	DB	"Select a key to remap, then press the new key."
	DB	0
L__108:
	DB	"Press 2nd to reset, clear to exit."
	DB	0
	SEGMENT CODE
;  439	
;  440	void drawGraphics() {
_drawGraphics:
.DEFINE "_drawGraphics"

.VALUE _drawGraphics

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawGraphics",440,"_drawGraphics"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  441		drawFlag = false;
.LINE 441

	XOR	A,A
	LD	(_drawFlag),A
;  442		
;  443		if(extendedScreen)
.LINE 443

	LD	A,(_extendedScreen)
	OR	A,A
	JR	Z,L_146
;  444			gfx_ScaledSprite_NoClip(scanvas, 30, 55, 2, 2);
.LINE 444

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,_scanvas_data
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  445		else
.LINE 445

	JR	L_147
L_146:
;  446			gfx_ScaledSprite_NoClip(canvas, 30, 55, 4, 4);
.LINE 446

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,_canvas_data
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  447	}
L_147:
.LINE 447

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawGraphics ***************************
;Name                         Addr/Register   Size   Type
;_canvas_data                        IMPORT   2050   variable
;_scanvas_data                       IMPORT   8194   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_extendedScreen                     IMPORT      1   variable
;_drawFlag                           IMPORT      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawGraphics",447,"_drawGraphics"
;  448	
;  449	void drawPreview(uint8_t x, uint8_t y) {
_drawPreview:
.DEFINE "_drawPreview"

.VALUE _drawPreview

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawPreview",449,"_drawPreview"

.LINE 449

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  450		drawFlag = false;
.LINE 450

	XOR	A,A
	LD	(_drawFlag),A
;  451		
;  452		if(extendedScreen)
.LINE 452

	LD	A,(_extendedScreen)
	OR	A,A
	JR	Z,L_149
;  453			gfx_Sprite_NoClip(scanvas, x, y);
.LINE 453

	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,_scanvas_data
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  454		else
.LINE 454

	JR	L_150
L_149:
;  455			gfx_ScaledSprite_NoClip(canvas, x, y, 2, 2);
.LINE 455

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,_canvas_data
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_150:
.LINE 456

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawPreview ***************************
;Name                         Addr/Register   Size   Type
;_canvas_data                        IMPORT   2050   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_scanvas_data                       IMPORT   8194   variable
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_extendedScreen                     IMPORT      1   variable
;_drawFlag                           IMPORT      1   variable
;y                                     IX+9      1   parameter
;x                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawPreview",456,"_drawPreview"
	XREF _sprites_gfx_pal:ROM
	XREF _scanvas_data:ROM
	XREF _canvas_data:ROM
	XREF _emulateCycle:ROM
	XREF _loadProgram:ROM
	XREF _controlMap:ROM
	XREF _keypad:ROM
	XREF _game_data:ROM
	XREF _extendedScreen:ROM
	XREF _playing:ROM
	XREF _paused:ROM
	XREF _drawFlag:ROM
	XREF _kb_ScanGroup:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_Circle:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _strcpy:ROM
	XREF _sprintf:ROM
	XREF _ti_GetSize:ROM
	XREF _ti_Rewind:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_Detect:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _boot_Set48MHzMode:ROM
	XREF _delay:ROM
	XREF __irems:ROM
	XREF __stoiu:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _drawPreview
	XDEF _drawGraphics
	XDEF _drawKeymappingMenu
	XDEF _beginKeymapper
	XDEF _startEmulation
	XDEF _drawMenu
	XDEF _main
	XDEF _data
	XDEF _settings
	XDEF _palette_colors
	XDEF _keyNames
	XDEF _pauseText
	XDEF _bgIndex
	XDEF _fgIndex
	XDEF _frameCount
	XDEF _cpf
	XDEF _bgColor
	XDEF _count
	XDEF _files
	XDEF _curFile
	END
