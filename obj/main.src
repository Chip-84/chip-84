; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME1"
.TYPE 104
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME7"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME8",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME9"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME10"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME10",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME10"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME11",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME11"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME15"
	SEGMENT BSS
_curFile:
	DS	1
.DEFINE "curFile"
.ALIAS "_curFile"
.CLASS 83
.VALUE _curFile
.TYPE 12
.ENDEF
_files:
	DS	2295
.DEFINE "files"
.ALIAS "_files"
.CLASS 83
.VALUE _files
.DIM 255
.DIM 9
.TYPE 866
.ENDEF
_count:
	DS	1
.DEFINE "count"
.ALIAS "_count"
.CLASS 83
.VALUE _count
.TYPE 12
.ENDEF
	SEGMENT DATA
_bgColor:
	DB	136
.DEFINE "bgColor"
.ALIAS "_bgColor"
.CLASS 69
.VALUE _bgColor
.TYPE 12
.ENDEF
_cpf:
	DB	10
.DEFINE "cpf"
.ALIAS "_cpf"
.CLASS 69
.VALUE _cpf
.TYPE 12
.ENDEF
	SEGMENT STRSECT
L__0:
	DB	"[2nd] - Pause"
	DB	0
	SEGMENT DATA
_pauseText:
	DW24	L__0
.DEFINE "pauseText"
.ALIAS "_pauseText"
.CLASS 69
.VALUE _pauseText
.TYPE 194
.ENDEF
	SEGMENT STRSECT
L__1:
	DB	"Decimal"
	DB	0
L__2:
	DB	"Seven"
	DB	0
L__3:
	DB	"Eight"
	DB	0
L__4:
	DB	"Nine"
	DB	0
L__5:
	DB	"Four"
	DB	0
L__6:
	DB	"Five"
	DB	0
L__7:
	DB	"Six"
	DB	0
L__8:
	DB	"One"
	DB	0
L__9:
	DB	"Two"
	DB	0
L__10:
	DB	"Three"
	DB	0
L__11:
	DB	"Zero"
	DB	0
L__12:
	DB	"Negative"
	DB	0
L__13:
	DB	"Times"
	DB	0
L__14:
	DB	"Plus"
	DB	0
L__15:
	DB	"Minus"
	DB	0
L__16:
	DB	"Enter"
	DB	0
	SEGMENT DATA
_keyNames:
	DW24	L__1
	DW24	L__2
	DW24	L__3
	DW24	L__4
	DW24	L__5
	DW24	L__6
	DW24	L__7
	DW24	L__8
	DW24	L__9
	DW24	L__10
	DW24	L__11
	DW24	L__12
	DW24	L__13
	DW24	L__14
	DW24	L__15
	DW24	L__16
.DEFINE "keyNames"
.ALIAS "_keyNames"
.CLASS 69
.VALUE _keyNames
.DIM 16
.TYPE 1634
.ENDEF
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <debug.h>
;    6	
;    7	#include <math.h>
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	
;   12	#include <graphx.h>
;   13	#include <keypadc.h>
;   14	#include <fileioc.h>
;   15	
;   16	#include "chip8.h"
;   17	#include "sprites_gfx.h"
;   18	
;   19	void drawGraphics(void);
;   20	void startEmulation(char *fileName);
;   21	void drawMenu(uint8_t start);
;   22	void drawKeymappingMenu(uint8_t selected);
;   23	void beginKeymapper(char *fileName);
;   24	void beginSetClock(void);
;   25	
;   26	ti_var_t curFile;
;   27	
;   28	char files[255][9];
;   29	uint8_t count;
;   30	
;   31	uint8_t bgColor = 0x88;
;   32	uint8_t cpf = 10;
;   33	
;   34	const char *pauseText = "[2nd] - Pause";
;   35	const char *keyNames[16] = {
	SEGMENT CODE
;   36		"Decimal",
;   37		"Seven",
;   38		"Eight",
;   39		"Nine",
;   40		"Four",
;   41		"Five",
;   42		"Six",
;   43		"One",
;   44		"Two",
;   45		"Three",
;   46		"Zero",
;   47		"Negative",
;   48		"Times",
;   49		"Plus",
;   50		"Minus",
;   51		"Enter"
;   52	};
;   53	
;   54	void main(void) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "main",54,"_main"

.LINE 54

.DEFINE "startPos"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "varName"

.CLASS 65

.VALUE -4

.TYPE 34

.ENDEF

.DEFINE "search_pos"

.CLASS 65

.VALUE -7

.TYPE 44

.ENDEF

.DEFINE "test1"

.CLASS 65

.VALUE -23

.DIM 16

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-23
	LD	SP,HL
;   55		uint8_t i;
;   56		char *varName;
;   57		uint8_t *search_pos = NULL;
.LINE 57

	LD	BC,0
	LD	(IX+-7),BC
;   58		uint8_t startPos = 0;
.LINE 58

	LD	(IX+-1),0
;   59		uint8_t test1[16] = {0x00,0x01,0x02,0x03,0x06,0x05,0x04,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
.LINE 59

	LEA	DE,IX+-23
	LD	HL,_0temp0
	LD	BC,16
	LDIR	
;   60		
;   61		boot_Set48MHzMode();
.LINE 61

	CALL	_boot_Set48MHzMode
;   62		
;   63		count = 0;
.LINE 63

	XOR	A,A
	LD	(_count),A
;   64		
;   65		gfx_Begin(gfx_8bpp);
.LINE 65

	LD	BC,39
	PUSH	BC
	CALL	_gfx_Begin
	POP	BC
;   66		gfx_Blit(gfx_screen);
.LINE 66

	LD	BC,0
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   67	    gfx_SetDrawBuffer();
.LINE 67

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   68		gfx_SetPalette(sprites_gfx_pal, sizeof_sprites_gfx_pal, 0);
.LINE 68

	LD	BC,0
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,_sprites_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   69		gfx_SetColor(0xff);
.LINE 69

	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   70		
;   71		gfx_SetTextFGColor(0x00);
.LINE 71

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   72		gfx_SetTextScale(2, 2);
.LINE 72

	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   73		gfx_PrintStringXY("Chip-84", 103, 95);
.LINE 73

	LD	BC,95
	PUSH	BC
	LD	BC,103
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   74		gfx_SetTextScale(1, 1);
.LINE 74

	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   75		gfx_PrintStringXY("2018 Christian Kosman", 80, 120);
.LINE 75

	LD	BC,120
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   76		gfx_PrintStringXY("version 2.0.0", LCD_WIDTH-100, LCD_HEIGHT-30);
.LINE 76

	LD	BC,210
	PUSH	BC
	LD	BC,220
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   77		gfx_BlitBuffer();
.LINE 77

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   78		
;   79		delay(1000);
.LINE 79

	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;   80		
;   81		while((varName = ti_Detect(&search_pos, "Chip84")) != NULL) {
.LINE 81

	JR	L_1
L_2:
;   82			//dbg_sprintf(dbgout, "%s\n", varName);
;   83			
;   84			strcpy(files[count], varName);
.LINE 84

	LD	BC,(IX+-4)
	PUSH	BC
	LD	A,(_count)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_strcpy
	POP	BC
	POP	BC
;   85			
;   86			++count;
.LINE 86

	LD	A,(_count)
	INC	A
	LD	(_count),A
;   87		}
L_1:
.LINE 87

	LD	BC,L__20
	PUSH	BC
	PEA	IX+-7
	CALL	_ti_Detect
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	CALL	__icmpzero
	JR	NZ,L_2
;   88		
;   89		drawMenu(0);
.LINE 89

	LD	BC,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;   90		
;   91		do {
L_18:
.LINE 91

;   92			kb_Scan();
.LINE 92

	CALL	_kb_Scan
;   93			
;   94			if(kb_Data[7] & kb_Up) {
.LINE 94

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_16
;   95				if(startPos == 0)
.LINE 95

	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_6
;   96					startPos = count-1;
.LINE 96

	LD	A,(_count)
	DEC	A
	LD	(IX+-1),A
;   97				else
.LINE 97

	JR	L_7
L_6:
;   98					startPos--;
.LINE 98

	DEC	(IX+-1)
L_7:
;   99				drawMenu(startPos);
.LINE 99

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  100			} else if(kb_Data[7] & kb_Down) {
.LINE 100

	JR	L_17
L_16:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_14
;  101				if(startPos == count-1)
.LINE 101

	LD	A,(_count)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_10
;  102					startPos = 0;
.LINE 102

	LD	(IX+-1),0
;  103				else
.LINE 103

	JR	L_11
L_10:
;  104					startPos++;
.LINE 104

	INC	(IX+-1)
L_11:
;  105				drawMenu(startPos);
.LINE 105

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  106			} else if(kb_Data[6] & kb_Enter) {
.LINE 106

	JR	L_17
L_14:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_17
;  107				gfx_FillScreen(0xFF);
.LINE 107

	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  108				startEmulation(files[startPos]);
.LINE 108

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_startEmulation
	POP	BC
;  109				drawMenu(startPos);
.LINE 109

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawMenu
	POP	BC
;  110			}
L_17:
.LINE 110

;  111			
;  112			gfx_BlitBuffer();
.LINE 112

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  113			delay(100);
.LINE 113

	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  114		} while (kb_Data[6] != kb_Clear);
.LINE 114

	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_18
;  115		
;  116		gfx_End();
.LINE 116

	CALL	_gfx_End
;  117	}
.LINE 117

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_startEmulation                     IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_drawMenu                           IMPORT  -----   function
;_ti_Detect                          IMPORT  -----   function
;_files                              STATIC   2295   variable
;_strcpy                             IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_sprites_gfx_pal                    IMPORT      4   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_count                              STATIC      1   variable
;_boot_Set48MHzMode                  IMPORT  -----   function
;_0temp0                             STATIC     16   variable
;test1                                IX-23     16   variable
;search_pos                            IX-7      3   variable
;varName                               IX-4      3   variable
;startPos                              IX-1      1   variable


; Stack Frame Size: 29 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",117,"_main"
	SEGMENT STRSECT
L__17:
	DB	"Chip-84"
	DB	0
L__18:
	DB	"2018 Christian Kosman"
	DB	0
L__19:
	DB	"version 2.0.0"
	DB	0
L__20:
	DB	"Chip84"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	6
	DB	5
	DB	4
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	15
	SEGMENT CODE
;  118	
;  119	void drawMenu(uint8_t start) {
_drawMenu:
.DEFINE "_drawMenu"

.VALUE _drawMenu

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawMenu",119,"_drawMenu"

.LINE 119

.DEFINE "start"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  120		uint8_t i;
;  121		gfx_FillScreen(0xff);
.LINE 121

	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  122		gfx_SetTextFGColor(0x00);
.LINE 122

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  123		for(i = 0; i < 16; i++) {
.LINE 123

	LD	(IX+-1),0
	JR	L_26
L_24:
;  124			if(i + start <= count-1) {
.LINE 124

	LD	A,(_count)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JP	M,L_25
;  125				gfx_SetTextXY(20, 10*i+10);
.LINE 125

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  126				gfx_PrintUInt(i+start, 3);
.LINE 126

	LD	BC,3
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  127				gfx_PrintStringXY(files[i+start], 50, 10*i+10);
.LINE 127

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,9
	CALL	__imul_b
	LD	BC,_files
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  128			}
;  129		}
L_25:
.LINE 129

	INC	(IX+-1)
L_26:
	LD	A,(IX+-1)
	CP	A,16
	JR	C,L_24
;  130		gfx_PrintStringXY(">",10,10);
.LINE 130

	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  131		
;  132		gfx_PrintStringXY("Use the arrows and enter to select a ROM.", 10, 180);
.LINE 132

	LD	BC,180
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__32
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  133		gfx_PrintStringXY("Then use 1, 2, 3, PLUS, 4, 5, 6, MINUS, 7, 8, 9,", 10, 195);
.LINE 133

	LD	BC,195
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  134		gfx_PrintStringXY("TIMES, 0, DECIMAL, ( - ), and ENTER to control.", 10, 205);
.LINE 134

	LD	BC,205
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  135		gfx_PrintStringXY("Press clear to quit.", 10, 220);
.LINE 135

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__35
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  136		
;  137	}
.LINE 137

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawMenu ***************************
;Name                         Addr/Register   Size   Type
;_files                              STATIC   2295   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_count                              STATIC      1   variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;i                                     IX-1      1   variable
;start                                 IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawMenu",137,"_drawMenu"
	SEGMENT STRSECT
L__31:
	DB	">"
	DB	0
L__32:
	DB	"Use the arrows and enter to select a ROM."
	DB	0
L__33:
	DB	"Then use 1, 2, 3, PLUS, 4, 5, 6, MINUS, 7, 8, 9,"
	DB	0
L__34:
	DB	"TIMES, 0, DECIMAL, ( - ), and ENTER to control."
	DB	0
L__35:
	DB	"Press clear to quit."
	DB	0
	SEGMENT CODE
;  138	
;  139	void startEmulation(char *fileName) {
_startEmulation:
.DEFINE "_startEmulation"

.VALUE _startEmulation

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "startEmulation",139,"_startEmulation"

.LINE 139

.DEFINE "fileName"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  140		
;  141		loadProgram(fileName);
.LINE 141

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_loadProgram
	POP	BC
;  142		
;  143		gfx_FillScreen(bgColor);
.LINE 143

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  144		gfx_SetTextFGColor(0x01);
.LINE 144

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  145		gfx_PrintStringXY(pauseText, 10, LCD_HEIGHT-20);
.LINE 145

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_pauseText)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  146		
;  147		do {
L_53:
.LINE 147

;  148			emulateCycle(cpf);
.LINE 148

	LD	A,(_cpf)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_emulateCycle
	POP	BC
;  149			
;  150			if(drawFlag)
.LINE 150

	LD	A,(_drawFlag)
	OR	A,A
	JR	Z,L_30
;  151				drawGraphics();
.LINE 151

	CALL	_drawGraphics
L_30:
;  152			
;  153			gfx_BlitBuffer();
.LINE 153

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  154			if(paused) {
.LINE 154

	LD	A,(_paused)
	OR	A,A
	JR	Z,L_54
;  155				gfx_PrintStringXY("Paused", 10, 10);
.LINE 155

	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,L__39
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  156				gfx_PrintStringXY("[clear] - Exit", 10, 20);
.LINE 156

	LD	BC,20
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__40
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  157				gfx_PrintStringXY("[alpha] - Keymapping", 10, 30);
.LINE 157

	LD	BC,30
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  158				gfx_PrintStringXY("[mode] - CPF", 10, 40);
.LINE 158

	LD	BC,40
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__42
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  159				gfx_BlitBuffer();
.LINE 159

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  160				while(paused) {
.LINE 160

	JR	L_50
L_51:
;  161					kb_Scan();
.LINE 161

	CALL	_kb_Scan
;  162					if(kb_Data[6] & kb_Clear) {
.LINE 162

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_31
	JR	L_39
;  163						while(kb_Data[6] & kb_Clear) {
L_32:
.LINE 163

;  164							kb_ScanGroup(6);
.LINE 164

	LD	BC,6
	PUSH	BC
	CALL	_kb_ScanGroup
	POP	BC
;  165						}
L_31:
.LINE 165

	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_32
;  166						playing = false;
.LINE 166

	XOR	A,A
	LD	(_playing),A
;  167						break;
.LINE 167

	JR	L_54
;  168					}
L_39:
.LINE 168

;  169					if(kb_Data[1] & kb_2nd) {
.LINE 169

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_35
	JR	L_44
;  170						while(kb_Data[1] & kb_2nd) {
L_36:
.LINE 170

;  171							kb_Scan();
.LINE 171

	CALL	_kb_Scan
;  172						}
L_35:
.LINE 172

	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_36
;  173						paused = false;
.LINE 173

	XOR	A,A
	LD	(_paused),A
;  174						gfx_SetColor(bgColor);
.LINE 174

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  175						gfx_FillRectangle(10, 10, 200, 50);
.LINE 175

	LD	BC,50
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  176					}
L_44:
.LINE 176

;  177					if(kb_Data[2] & kb_Alpha) {
.LINE 177

	LD	A,(16056340)
	AND	A,128
	JR	NZ,L_40
	JR	L_49
;  178						while(kb_Data[2] & kb_Alpha) {
L_41:
.LINE 178

;  179							kb_Scan();
.LINE 179

	CALL	_kb_Scan
;  180						}
L_40:
.LINE 180

	LD	A,(16056340)
	AND	A,128
	JR	NZ,L_41
;  181						beginKeymapper(fileName);
.LINE 181

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_beginKeymapper
	POP	BC
;  182						gfx_PrintStringXY(pauseText, 10, LCD_HEIGHT-20);
.LINE 182

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_pauseText)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  183					}
L_49:
.LINE 183

;  184					if(kb_Data[1] & kb_Mode) {
.LINE 184

	LD	A,(16056338)
	AND	A,64
	JR	NZ,L_45
	JR	L_50
;  185						while(kb_Data[1] & kb_Mode) {
L_46:
.LINE 185

;  186							kb_Scan();
.LINE 186

	CALL	_kb_Scan
;  187						}
L_45:
.LINE 187

	LD	A,(16056338)
	AND	A,64
	JR	NZ,L_46
;  188						beginSetClock();
.LINE 188

	CALL	_beginSetClock
;  189						gfx_PrintStringXY(pauseText, 10, LCD_HEIGHT-20);
.LINE 189

	LD	BC,220
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_pauseText)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  190					}
;  191				}
L_50:
.LINE 191

	LD	A,(_paused)
	OR	A,A
	JR	NZ,L_51
;  192			}
;  193		} while (playing);
L_54:
.LINE 193

	LD	A,(_playing)
	OR	A,A
	JR	NZ,L_53
;  194	}
.LINE 194

	LD	SP,IX
	POP	IX
	RET	


;**************************** _startEmulation ***************************
;Name                         Addr/Register   Size   Type
;_beginSetClock                      IMPORT  -----   function
;_beginKeymapper                     IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_playing                            IMPORT      1   variable
;_kb_ScanGroup                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_paused                             IMPORT      1   variable
;_gfx_Blit                           IMPORT  -----   function
;_drawGraphics                       IMPORT  -----   function
;_drawFlag                           IMPORT      1   variable
;_cpf                                STATIC      1   variable
;_emulateCycle                       IMPORT  -----   function
;_pauseText                          STATIC      3   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_loadProgram                        IMPORT  -----   function
;fileName                              IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "startEmulation",194,"_startEmulation"
	SEGMENT STRSECT
L__39:
	DB	"Paused"
	DB	0
L__40:
	DB	"[clear] - Exit"
	DB	0
L__41:
	DB	"[alpha] - Keymapping"
	DB	0
L__42:
	DB	"[mode] - CPF"
	DB	0
	SEGMENT CODE
;  195	
;  196	void beginSetClock() {
_beginSetClock:
.DEFINE "_beginSetClock"

.VALUE _beginSetClock

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "beginSetClock",196,"_beginSetClock"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  197		gfx_FillScreen(bgColor);
.LINE 197

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  198		gfx_PrintStringXY("Set the amount of cycles emulated per frame.", 10, 10);
.LINE 198

	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,L__54
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  199		gfx_PrintStringXY("Press mode to exit.", 10, 25);
.LINE 199

	LD	BC,25
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__55
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  200		
;  201		gfx_SetTextXY(140, 115);
.LINE 201

	LD	BC,115
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  202		gfx_PrintUInt(cpf, 2);
.LINE 202

	LD	BC,2
	PUSH	BC
	LD	A,(_cpf)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  203		gfx_SetColor(bgColor);
.LINE 203

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  204		
;  205		gfx_BlitBuffer();
.LINE 205

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  206		do {
L_66:
.LINE 206

;  207			kb_Scan();
.LINE 207

	CALL	_kb_Scan
;  208			if(kb_Data[7] & kb_Down) {
.LINE 208

	LD	A,(16056350)
	AND	A,1
	JR	Z,L_64
;  209				cpf--;
.LINE 209

	LD	A,(_cpf)
	DEC	A
	LD	(_cpf),A
;  210				if(cpf == 0) cpf = 1;
.LINE 210

	OR	A,A
	JR	NZ,L_58
	LD	A,1
	LD	(_cpf),A
L_58:
;  211				gfx_FillRectangle(140, 115, 30, 30);
.LINE 211

	LD	BC,30
	PUSH	BC
	PUSH	BC
	LD	BC,115
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  212				gfx_SetTextXY(140, 115);
.LINE 212

	LD	BC,115
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  213				gfx_PrintUInt(cpf, 2);
.LINE 213

	LD	BC,2
	PUSH	BC
	LD	A,(_cpf)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  214				gfx_BlitBuffer();
.LINE 214

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  215			}
L_64:
.LINE 215

;  216			if(kb_Data[7] & kb_Up) {
.LINE 216

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_65
;  217				cpf++;
.LINE 217

	LD	A,(_cpf)
	INC	A
	LD	(_cpf),A
;  218				if(cpf > 20) cpf = 20;
.LINE 218

	LD	A,20
	LD	HL,_cpf
	CP	A,(HL)
	JR	NC,L_62
	LD	(_cpf),A
L_62:
;  219				gfx_FillRectangle(140, 115, 30, 30);
.LINE 219

	LD	BC,30
	PUSH	BC
	PUSH	BC
	LD	BC,115
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  220				gfx_SetTextXY(140, 115);
.LINE 220

	LD	BC,115
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  221				gfx_PrintUInt(cpf, 2);
.LINE 221

	LD	BC,2
	PUSH	BC
	LD	A,(_cpf)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  222				gfx_BlitBuffer();
.LINE 222

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  223			}
L_65:
.LINE 223

;  224			delay(100);
.LINE 224

	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  225		} while(kb_Data[1] != kb_Mode);
.LINE 225

	LD	A,(16056338)
	CP	A,64
	JR	NZ,L_66
;  226		gfx_FillScreen(bgColor);
.LINE 226

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  227		gfx_BlitBuffer();
.LINE 227

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  228		paused = false;
.LINE 228

	XOR	A,A
	LD	(_paused),A
;  229	}
.LINE 229

	LD	SP,IX
	POP	IX
	RET	


;**************************** _beginSetClock ***************************
;Name                         Addr/Register   Size   Type
;_paused                             IMPORT      1   variable
;_delay                              IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_cpf                                STATIC      1   variable
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "beginSetClock",229,"_beginSetClock"
	SEGMENT STRSECT
L__54:
	DB	"Set the amount of cycles emulated per frame."
	DB	0
L__55:
	DB	"Press mode to exit."
	DB	0
	SEGMENT CODE
;  230	
;  231	void beginKeymapper(char *fileName) {
_beginKeymapper:
.DEFINE "_beginKeymapper"

.VALUE _beginKeymapper

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "beginKeymapper",231,"_beginKeymapper"

.LINE 231

.DEFINE "fileName"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "selected"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "awaiting"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  232		uint8_t selected = 0;
.LINE 232

	LD	(IX+-1),0
;  233		uint8_t i;
;  234		bool awaiting = false;
.LINE 234

	LD	(IX+-3),0
;  235		
;  236		drawKeymappingMenu(selected);
.LINE 236

	LD	BC,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  237		
;  238		do {
L_97:
.LINE 238

;  239			kb_Scan();
.LINE 239

	CALL	_kb_Scan
;  240			if(!awaiting) {
.LINE 240

	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_96
;  241				if(kb_Data[7] & kb_Down) {
.LINE 241

	LD	A,(16056350)
	AND	A,1
	JR	Z,L_79
;  242					selected++;
.LINE 242

	INC	(IX+-1)
;  243					if(selected > 16) selected = 0;
.LINE 243

	LD	A,16
	CP	A,(IX+-1)
	JR	NC,L_72
	LD	(IX+-1),0
L_72:
;  244					drawKeymappingMenu(selected);
.LINE 244

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  245				}
L_79:
.LINE 245

;  246				if(kb_Data[7] & kb_Up) {
.LINE 246

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_81
;  247					if(selected == 0)
.LINE 247

	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_76
;  248						selected = 16;
.LINE 248

	LD	(IX+-1),16
;  249					else
.LINE 249

	JR	L_77
L_76:
;  250						selected--;
.LINE 250

	DEC	(IX+-1)
L_77:
;  251					drawKeymappingMenu(selected);
.LINE 251

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  252				}
L_81:
.LINE 252

;  253				if(kb_Data[6] & kb_Enter) {
.LINE 253

	LD	A,(16056348)
	AND	A,1
	JR	Z,L_88
;  254					drawKeymappingMenu(selected+16);
.LINE 254

	LD	A,(IX+-1)
	ADD	A,16
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  255					awaiting = 1;
.LINE 255

	LD	(IX+-3),1
;  256				}
L_88:
.LINE 256

;  257				if(kb_Data[1] & kb_2nd) {
.LINE 257

	LD	A,(16056338)
	AND	A,32
	JR	Z,L_89
;  258					for(i = 0; i < 16; i++) {
.LINE 258

	LD	(IX+-2),0
	JR	L_85
L_83:
;  259						game_data[i+6] = i;
.LINE 259

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,_game_data
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
;  260						controlMap[i] = i;
.LINE 260

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,_controlMap
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
	INC	(IX+-2)
;  261					}
L_85:
.LINE 261

	LD	A,(IX+-2)
	CP	A,16
	JR	C,L_83
;  262					drawKeymappingMenu(selected);
.LINE 262

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  263				}
L_89:
.LINE 263

;  264				delay(100);
.LINE 264

	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  265			} else {
.LINE 265

	JR	L_98
L_96:
;  266				keypad[0x0] = kb_Data[4] & kb_DecPnt;
.LINE 266

	LD	A,(16056344)
	AND	A,1
	LD	(_keypad),A
;  267				keypad[0x1] = kb_Data[3] & kb_7;
.LINE 267

	LD	A,(16056342)
	AND	A,8
	LD	HL,_keypad
	INC	HL
	LD	(HL),A
;  268				keypad[0x2] = kb_Data[4] & kb_8;
.LINE 268

	LD	A,(16056344)
	AND	A,8
	LD	IY,_keypad
	LEA	HL,IY+2
	LD	(HL),A
;  269				keypad[0x3] = kb_Data[5] & kb_9;
.LINE 269

	LD	A,(16056346)
	AND	A,8
	LEA	HL,IY+3
	LD	(HL),A
;  270				keypad[0x4] = kb_Data[3] & kb_4;
.LINE 270

	LD	A,(16056342)
	AND	A,4
	LEA	HL,IY+4
	LD	(HL),A
;  271				keypad[0x5] = kb_Data[4] & kb_5;
.LINE 271

	LD	A,(16056344)
	AND	A,4
	LEA	HL,IY+5
	LD	(HL),A
;  272				keypad[0x6] = kb_Data[5] & kb_6;
.LINE 272

	LD	A,(16056346)
	AND	A,4
	LEA	HL,IY+6
	LD	(HL),A
;  273				keypad[0x7] = kb_Data[3] & kb_1;
.LINE 273

	LD	A,(16056342)
	AND	A,2
	LEA	HL,IY+7
	LD	(HL),A
;  274				keypad[0x8] = kb_Data[4] & kb_2;
.LINE 274

	LD	A,(16056344)
	AND	A,2
	LEA	HL,IY+8
	LD	(HL),A
;  275				keypad[0x9] = kb_Data[5] & kb_3;
.LINE 275

	LD	A,(16056346)
	AND	A,2
	LEA	HL,IY+9
	LD	(HL),A
;  276				keypad[0xA] = kb_Data[3] & kb_0;
.LINE 276

	LD	A,(16056342)
	AND	A,1
	LEA	HL,IY+10
	LD	(HL),A
;  277				keypad[0xB] = kb_Data[5] & kb_Chs;
.LINE 277

	LD	A,(16056346)
	AND	A,1
	LEA	HL,IY+11
	LD	(HL),A
;  278				keypad[0xC] = kb_Data[6] & kb_Mul;
.LINE 278

	LD	A,(16056348)
	AND	A,8
	LEA	HL,IY+12
	LD	(HL),A
;  279				keypad[0xD] = kb_Data[6] & kb_Sub;
.LINE 279

	LD	A,(16056348)
	AND	A,4
	LEA	HL,IY+13
	LD	(HL),A
;  280				keypad[0xE] = kb_Data[6] & kb_Add;
.LINE 280

	LD	A,(16056348)
	AND	A,2
	LEA	HL,IY+14
	LD	(HL),A
;  281				keypad[0xF] = kb_Data[6] & kb_Enter;
.LINE 281

	LD	A,(16056348)
	AND	A,1
	LEA	HL,IY+15
	LD	(HL),A
;  282				
;  283				for(i = 0; i < 16; i++) {
.LINE 283

	LD	(IX+-2),0
	JR	L_94
L_92:
;  284					if(keypad[i]) {
.LINE 284

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,_keypad
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_93
;  285						game_data[selected+6] = i;
.LINE 285

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,_game_data
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
;  286						controlMap[selected] = i;
.LINE 286

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,_controlMap
	ADD	HL,BC
	LD	A,(IX+-2)
	LD	(HL),A
;  287						awaiting = 0;
.LINE 287

	LD	(IX+-3),0
;  288						drawKeymappingMenu(selected);
.LINE 288

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_drawKeymappingMenu
	POP	BC
;  289					}
;  290				}
L_93:
.LINE 290

	INC	(IX+-2)
L_94:
	LD	A,(IX+-2)
	CP	A,16
	JR	C,L_92
;  291			}
;  292		} while(kb_Data[2] != kb_Alpha);
L_98:
.LINE 292

	LD	A,(16056340)
	CP	A,128
	JR	NZ,L_97
;  293		
;  294		ti_CloseAll();
.LINE 294

	CALL	_ti_CloseAll
;  295		curFile = ti_Open(fileName, "w");
.LINE 295

	LD	BC,L__73
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(_curFile),A
;  296		ti_Write(&game_data, sizeof(game_data)/sizeof(uint8_t), 1, curFile);
.LINE 296

	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3584
	PUSH	BC
	LD	BC,_game_data
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  297		
;  298		gfx_FillScreen(bgColor);
.LINE 298

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  299		gfx_BlitBuffer();
.LINE 299

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  300		paused = false;
.LINE 300

	XOR	A,A
	LD	(_paused),A
;  301	}
.LINE 301

	LD	SP,IX
	POP	IX
	RET	


;**************************** _beginKeymapper ***************************
;Name                         Addr/Register   Size   Type
;_paused                             IMPORT      1   variable
;_gfx_Blit                           IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_curFile                            STATIC      1   variable
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_keypad                             IMPORT     16   variable
;_delay                              IMPORT  -----   function
;_controlMap                         IMPORT     16   variable
;_game_data                          IMPORT   3584   variable
;_kb_Scan                            IMPORT  -----   function
;_drawKeymappingMenu                 IMPORT  -----   function
;awaiting                              IX-3      1   variable
;i                                     IX-2      1   variable
;selected                              IX-1      1   variable
;fileName                              IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "beginKeymapper",301,"_beginKeymapper"
	SEGMENT STRSECT
L__73:
	DB	"w"
	DB	0
	SEGMENT CODE
;  302	
;  303	void drawKeymappingMenu(uint8_t selected) {
_drawKeymappingMenu:
.DEFINE "_drawKeymappingMenu"

.VALUE _drawKeymappingMenu

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawKeymappingMenu",303,"_drawKeymappingMenu"

.LINE 303

.DEFINE "selected"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  304		uint8_t i;
;  305		gfx_FillScreen(bgColor);
.LINE 305

	LD	A,(_bgColor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  306		
;  307		for(i = 0; i < 16; i++) {
.LINE 307

	LD	(IX+-1),0
	JR	L_104
L_102:
;  308			gfx_PrintStringXY("Key", 30, i*10+10);
.LINE 308

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,L__75
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  309			gfx_SetTextXY(60, i*10+10);
.LINE 309

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  310			gfx_PrintUInt(i, 2);
.LINE 310

	LD	BC,2
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  311			gfx_PrintStringXY(keyNames[game_data[i+6]], 90, i*10+10);
.LINE 311

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,_game_data
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_keyNames
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  312		}
L_104:
.LINE 312

	LD	A,(IX+-1)
	CP	A,16
	JR	C,L_102
;  313		
;  314		gfx_PrintStringXY("Select a key to remap, then press the new key.", 10, 200);
.LINE 314

	LD	BC,200
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__77
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  315		gfx_PrintStringXY("Press 2nd to reset, alpha to exit.", 10, 215);
.LINE 315

	LD	BC,215
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  316		
;  317		gfx_SetColor(0x01);
.LINE 317

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  318		if(selected > 16) {
.LINE 318

	LD	A,16
	CP	A,(IX+6)
	JR	NC,L_107
;  319			gfx_Circle(13, (selected%16)*10+13, 3);
.LINE 319

	LD	BC,3
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+13
	PUSH	BC
	LD	BC,13
	PUSH	BC
	CALL	_gfx_Circle
	POP	BC
	POP	BC
	POP	BC
;  320		} else {
.LINE 320

	JR	L_108
L_107:
;  321			gfx_FillRectangle(10, (selected%16)*10+10, 6, 6);
.LINE 321

	LD	BC,6
	PUSH	BC
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+10
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  322		}
L_108:
.LINE 322

;  323		
;  324		gfx_BlitBuffer();
.LINE 324

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  325	}
.LINE 325

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawKeymappingMenu ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Blit                           IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_Circle                         IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_game_data                          IMPORT   3584   variable
;_keyNames                           STATIC     48   variable
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_bgColor                            STATIC      1   variable
;_gfx_FillScreen                     IMPORT  -----   function
;i                                     IX-1      1   variable
;selected                              IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawKeymappingMenu",325,"_drawKeymappingMenu"
	SEGMENT STRSECT
L__75:
	DB	"Key"
	DB	0
L__77:
	DB	"Select a key to remap, then press the new key."
	DB	0
L__78:
	DB	"Press 2nd to reset, alpha to exit."
	DB	0
	SEGMENT CODE
;  326	
;  327	void drawGraphics() {
_drawGraphics:
.DEFINE "_drawGraphics"

.VALUE _drawGraphics

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "drawGraphics",327,"_drawGraphics"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  328		drawFlag = false;
.LINE 328

	XOR	A,A
	LD	(_drawFlag),A
;  329		
;  330		if(extendedScreen)
.LINE 330

	LD	A,(_extendedScreen)
	OR	A,A
	JR	Z,L_111
;  331			gfx_ScaledSprite_NoClip(scanvas, 30, 55, 2, 2);
.LINE 331

	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,_scanvas_data
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  332		else
.LINE 332

	JR	L_112
L_111:
;  333			gfx_ScaledSprite_NoClip(canvas, 30, 55, 4, 4);
.LINE 333

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,30
	PUSH	BC
	LD	BC,_canvas_data
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_112:
.LINE 334

	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawGraphics ***************************
;Name                         Addr/Register   Size   Type
;_canvas_data                        IMPORT   2050   variable
;_scanvas_data                       IMPORT   8194   variable
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_extendedScreen                     IMPORT      1   variable
;_drawFlag                           IMPORT      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "drawGraphics",334,"_drawGraphics"
	XREF _sprites_gfx_pal:ROM
	XREF _scanvas_data:ROM
	XREF _canvas_data:ROM
	XREF _emulateCycle:ROM
	XREF _loadProgram:ROM
	XREF _controlMap:ROM
	XREF _keypad:ROM
	XREF _game_data:ROM
	XREF _extendedScreen:ROM
	XREF _playing:ROM
	XREF _paused:ROM
	XREF _drawFlag:ROM
	XREF _kb_ScanGroup:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_Circle:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _strcpy:ROM
	XREF _ti_Write:ROM
	XREF _ti_Detect:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _boot_Set48MHzMode:ROM
	XREF _delay:ROM
	XREF __irems:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _drawGraphics
	XDEF _drawKeymappingMenu
	XDEF _beginKeymapper
	XDEF _beginSetClock
	XDEF _startEmulation
	XDEF _drawMenu
	XDEF _main
	XDEF _keyNames
	XDEF _pauseText
	XDEF _cpf
	XDEF _bgColor
	XDEF _count
	XDEF _files
	XDEF _curFile
	END
